#!/bin/bash
#########################################################################
#
#   Copyright 2009 David Liang
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#   Revisions:
#   2009-04-18  File created
#   2009-04-19  Documentation
#   2009-07-14  Added options to ignore comments
#   2009-07-15  Added option to display all lines/sections
#   2009-07-18  Support for fixed and excluded lists and ranges
#   2009-07-24  Support for grepping (first) lines
#   2009-07-28  Added -t option
#   2009-08-17  Added options --list and --count
#               Ability to grep more than one PATTERN
#   2009-08-25  Added options -p, -i, and -s
#   2009-08-28  Added --first, --last, -v, and --canonical options
#               Changed --except to --exclude; -a must now be explicit
#               Fully general random selection with -m option
#
#########################################################################

PROG=$(basename "$0")
VERSION='0.95'

# use gawk, mawk, etc.
AWK=(awk)

# one-character separator for ranges
# must not be '-' or a regular expression or shell special character
SEP=':'

printUsage() {
local SPCS=$(printf '%*s' ${#PROG} '')
cat << -EOF-
Usage: $PROG [-d DELIM]  [-c STR]  [-g PATTERN]... [-vis]
       $SPCS [-a] [-f LIST]...  [-e LIST]...  [ --first | --last | -m ]
       $SPCS [--first-line]  [-n[...]] [-N[...]] [--canonical]  [-pr]
       $SPCS [-t N] [-w]  [ --list | --count ]  [--help]  [--]  [FILE]...
-EOF-
}

helpText() {
local SPC=' '
cat << -EOF-
$PROG $VERSION

By default, prints a random line or section from files on the command line.
If the "-d" option is given, a section delimited by its argument is printed;
otherwise a single non-empty line is printed. For example, if the file
contained the following, invoke with -d '>>':

>> foo
>> bar
...

Entries (sections or non-empty lines) can be non-randomly selected according
to the options below.

$(printUsage)

Options:
  -h, --help        display this help message and exit
  -?, --usage       display the usage string and exit
  -d DELIM, --delimiter=DELIM
                    use section delimiters, to be matched at line starts
                    (DELIM, STR, and PATTERN are \`awk' regular expressions)
  -c STR, --comment=STR
                    ignore comments, which begin with STR and continue to the
                    end of the line
  -g PATTERN, --grep=PATTERN
                    limit selection to entries that contain PATTERN; matches
                    are made against the first line of each entry by default
  -v, --not         invert the sense of matching (exclude matching entries)
  -i, --ignore-case
                    make all patterns case-insensitive (only for GNU \`awk')
  -s, --search-all  search the entire entry, including comments, for PATTERN
                    (note that this will slow down processing significantly)
  -a, --all         start with all entries (same as -f 1$SEP)
  -f LIST, --fixed=LIST
                    specify the entries to start with; a LIST contains one or
                    more comma-separated ranges, and each range may be one of:
                        N${SPC}      the Nth entry
                        N${SEP}      starting with the Nth entry
                        N${SEP}M     Nth to Mth entries (inclusive)
                        ${SEP}M      first to Mth entries (inclusive)
                    N and M may be negative, in which case entries are indexed
                    from the end; for example:
                        -1${SPC}     last entry
                        -10${SEP}    last ten entries
                        ${SEP}-10    up to and including the tenth last entry
                    if 0 is explicitly included, the part of the input before
                    the first section or line will always be printed
  -e LIST, --exclude=LIST
                    exclude certain entries from selection (LIST format same
                    as for -f)
  --first  --last   only select the first or last eligible entry
  -m, --random      force a random selection among eligible entries; this is
                    the default action in the absence of -a, -f, --first, and
                    --last  (random selection implies -a unless -f is present)
  --first-line      only print the first line from each entry
  -n[...]           number the entries and optionally append a string after
                    the number (e.g. -n'. ')
  -N[...]           as above, but before the number (e.g. -N'#')
  --canonical       start numbering incrementally from one, instead of using
                    entry indices for numbering
  -p, --preserve    preserve comments and blank lines when printing
                    n.b. without the -d option, comments and blank lines are
                    associated with the previous non-blank line
  -r, --raw         preserve section delimiters in addition to -p
  -t N, --tabs=N    expand tabs to N spaces
  -w, --wrap[=N]    wrap lines at 80 or at N, with breaks at spaces (to wrap
                    based on terminal width, export COLUMNS)
  --list            only print the indices of selected entries
  --count           only print the total number of selected entries

-EOF-
}

errorMsg() {
    if [ $# -gt 0 ]; then
        echo >&2 "$PROG: $@"
    fi
}
errorUsage() {
    printUsage >&2
    if [ $# -gt 0 ]; then
        echo >&2
        errorMsg "$@"
    fi
    exit 2
}
cleanUp() {
    rm -f "$TEMPFILE"
}
errorExit() {
    if [[ "$1" =~ ^[0-9]+$ ]]
    then code=$1 && shift
    else code=1
    fi
    errorMsg "$@"
    cleanUp
    exit $code
}
trap "errorExit aborted" 2 3
trap "errorExit terminated" 1 15

declare -a argv

missingArgument() {
    errorUsage "$1 requires an argument"
}

DELIM=
COMMENT=

PATTERNS=
checkPattern() {
    if [ -z "$2" ]; then
        missingArgument "$1"
    elif [[ "$2" == *$'\n'* ]]; then
        errorUsage "Argument to $1 cannot contain newlines"
    fi
    PATTERNS+=$'\n'"$2"
}

FIXED=
EXCLUDE=

INDEX='-?[0-9]+'
RANGE="($SEP?$INDEX|$INDEX$SEP($INDEX)?)"
checkList() {
    if [ -z "$3" ]; then
        missingArgument "$2"
    elif [[ ! "$3" =~ ^$RANGE(,$RANGE)*$ ]]; then
        errorUsage "Invalid argument for $2: $3"
    fi
    eval "$1+=\",$3\""
}

NUMBER=
PREFIX=
SUFFIX=

EXPAND=
checkTabs() {
    if [ -z "$2" ]; then
        missingArgument "$1"
    elif [[ ! "$2" =~ ^[0-9]+$ ]]; then
        errorUsage "Invalid argument for $1: $2"
    fi
    EXPAND=(expand -t"$2")
}

FOLD=
checkWrap() {
    FOLD=(fold --spaces)
    if [ -z "$2" ]; then
        [ "$1" = "--wrap" ] && missingArgument "$1"
        FOLD+=(--width=80)
    elif [[ "$2" =~ ^[0-9]+$ ]]; then
        FOLD+=(--width=$2)
    else
        errorUsage "Invalid value for $1: $2"
    fi
}

_not=
_ignorecase=
_searchall=
_all=
_first=
_last=
_random=
_firstline=
_canonical=
_preserve=
_raw=
_list=
_count=

_temp=      # read from stdin or pipe
_noprint=   # non-printing

while [ $# -gt 0 ]; do
    case "$1" in
    -g)             shift
                    checkPattern '-g' "$1" && shift
                    ;;
    -g*)            checkPattern '-g' "${1:2}" && shift
                    ;;
    --grep=*)       checkPattern '--grep' "${1#--grep=}" && shift
                    ;;
    -f)             shift
                    checkList FIXED '-f' "$1" && shift
                    ;;
    -f*)            checkList FIXED '-f' "${1:2}" && shift
                    ;;
    --fixed=*)      checkList FIXED '--fixed' "${1#--fixed=}" && shift
                    ;;
    -e)             shift
                    checkList EXCLUDE '-e' "$1" && shift
                    ;;
    -e*)            checkList EXCLUDE '-e' "${1:2}" && shift
                    ;;
    --exclude=*)    checkList EXCLUDE '--exclude' "${1#--exclude=}" && shift
                    ;;
    -d)             shift
                    [ -z "$1" ] && missingArgument "-d"
                    DELIM="$1" && shift
                    ;;
    -d*)            DELIM="${1:2}" && shift
                    ;;
    --delimiter=*)  DELIM="${1#--delimiter=}" && shift
                    [ -z "$DELIM" ] && missingArgument "--delimiter"
                    ;;
    -c)             shift
                    [ -z "$1" ] && missingArgument "-c"
                    COMMENT="$1" && shift
                    ;;
    -c*)            COMMENT="${1:2}" && shift
                    ;;
    --comment=*)    COMMENT="${1#--comment=}" && shift
                    [ -z "$COMMENT" ] && missingArgument "--comment"
                    ;;
    -N|-n)          NUMBER=1 && shift
                    ;;
    -N*)            PREFIX="${1:2}" && shift
                    ;;
    -n*)            SUFFIX="${1:2}" && shift
                    ;;
    --canonical)    _canonical=1 && shift
                    ;;
    -a|--all)       _all=1 && shift
                    ;;
    -a*)            _all=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -m|--random)    _random=1 && shift
                    ;;
    -m*)            _random=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -v|--not)       _not=1 && shift
                    ;;
    -v*)            _not=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -i|--ignore-case)
                    _ignorecase=1 && shift
                    ;;
    -i*)            _ignorecase=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -s|--search-all)
                    _searchall=1 && shift
                    ;;
    -s*)            _searchall=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    --first)        _first=1 && shift
                    ;;
    --last)         _last=1 && shift
                    ;;
    --first-line)   _firstline=1 && shift
                    ;;
    -p|--preserve)  _preserve=1 && shift
                    ;;
    -p*)            _preserve=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -r|--raw)       _raw=1 && shift
                    ;;
    -r*)            _raw=1
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    -t)             shift
                    checkTabs '-t' "$1" && shift
                    ;;
    -t*)            checkTabs '-t' "${1:2}" && shift
                    ;;
    --tabs=*)       checkTabs '--tabs' "${1#--tabs=}" && shift
                    ;;
    -w|--wrap)      checkWrap '$COLUMNS' "$COLUMNS" && shift
                    ;;
    -w*)            checkWrap '$COLUMNS' "$COLUMNS"
                    rest="${1:2}" && shift
                    [ "${rest:0:1}" != "-" ] && rest="-$rest"
                    set -- "$rest" "$@"
                    ;;
    --wrap=*)       checkWrap "--wrap" "${1#--wrap=}" && shift
                    ;;
    --list)         _list=1 && shift
                    ;;
    --count)        _count=1 && shift
                    ;;
    -h*|--help)     helpText
                    exit 0
                    ;;
    -\?*|--usage)   printUsage
                    exit 0
                    ;;
    --)             shift && break
                    ;;
    --*)            errorUsage "Unknown option: ${1%%=*}"
                    ;;
    -?*)            errorUsage "Unknown option: ${1:0:2}"
                    ;;
    *)              argv+=("$1") && shift
                    ;;
    esac
done

set -- "${argv[@]}" "$@"

[ $# -eq 0 ] && set -- -

! type "$AWK" &>/dev/null && AWK=(awk)

[ "$COMMENT" ] && COMMENT='sub(/(^|[ \t]+)'"$COMMENT"'.*/, "")'

if [ "$PATTERNS" ]; then
    if type _sd &>/dev/null
    then _sd=_sd
    else _sd=echo
    fi
    PATTERNS=$($_sd "${PATTERNS#$'\n'}" | sed \
               's/\(^\|[^\]\)\(\(\\\\\)*\)\\\([.*?+(|)<Ww>^$[]\)/\1\2\\\\\4/g')
else
    _searchall=
fi

FIXED="${FIXED#,}"
EXCLUDE="${EXCLUDE#,}"

declare -i PAD=${#PREFIX}+${#SUFFIX}
if [ "$NUMBER" -o $PAD -gt 0 ]; then
    if [ "$PREFIX" ]
    then ALIGN='-'
    else ALIGN=
    fi
    PREFIX="${PREFIX//\\/\\\\}"
    SUFFIX="${SUFFIX//\\/\\\\}"
    if [ "$_canonical" ]
    then NUMBER=count
    else NUMBER=current
    fi
    NUMBER="\"${PREFIX//\"/\\\"}\" $NUMBER \"${SUFFIX//\"/\\\"} \""
fi

if [ "$_list" -o "$_count" ]; then
    _noprint=1
    EXPAND=
fi

writeTemp() {
    local TEMPDIR
    if [ -d "$HOME/tmp" ]
    then TEMPDIR="$HOME/tmp"
    else TEMPDIR=/tmp
    fi
    TEMPFILE=$(mktemp -q -p "$TEMPDIR" "$PROG.$$.XXXX")
    if [ $? -ne 0 ]; then
        errorExit "Could not create temp file"
    fi
    [ ! "$EXPAND" ] && EXPAND=(cat)
    "${EXPAND[@]}" -- "${FILES[@]}" >"$TEMPFILE" || errorExit $?
    FILES=("$TEMPFILE")
}
TEMPFILE=

countEntries() {
    local main
    if [ "$DELIM" ]
    then main='/^'"$DELIM"'/ {
            count += 1;
        }'
    else main='{
            '"$COMMENT"';
            if ($0 ~ /[^ \t]/)
                count += 1;
        }'
    fi
    [ "$_temp" -o "$EXPAND" ] && writeTemp
    COUNT=$(${AWK[@]} "BEGIN { count = 0 }
                       $main
                       END { print count }" "${FILES[@]}")
}

firstPass() {
    if [[ "$FIXED" == *-[0-9]* || "$EXCLUDE" == *-[0-9]* ]]; then
        countEntries || return $?
    else
        [ ! "$_noprint" -a "$_temp" -o "$EXPAND" ] && writeTemp
        COUNT=0
    fi

    local prelude main delayed postlude vars=(
        -v COUNT=$COUNT
        -v PATTERNS="$PATTERNS"
        -v IGNORECASE=$_ignorecase  -v SEARCHALL=$_searchall
        -v ALL=$_all  -v RANDOM=$_random
        -v FIXED="$FIXED"  -v EXCLUDE="$EXCLUDE"  -v SEP="$SEP"
        -v FIRST=$_first  -v LAST=$_last
        -v COUNTONLY=$_count
    ) functions='
        function min(a, b) { return (b < a ? b : a) }
        function max(a, b) { return (b > a ? b : a) }
        function updateLimit(lower, upper, table) {
            if (lower > upper)
                return;
            if (ALL) {
                if (lower <= limit && upper >= limit) {
                    limit = lower - 1;
                    while (limit in table)
                        limit -= 1;
                }
            } else {
                if (! COUNT)
                    limit = max(limit, upper);
                else if (lower <= COUNT)
                    limit = max(limit, min(upper, COUNT));
            }
        }
        function parseList( list, table,
                            has_threshold, has_limit, ranges, n, i, j, sep )
        {
            has_threshold = 0; has_limit = 1;
            if (ALL)
                limit = COUNT;
            else
                limit = 0;
            split(list, ranges, ",");
            for (i in ranges) {
                sep = index(ranges[i], SEP);
                split(ranges[i], n, SEP);
                if (! sep) {
                    if (n[1] == 0) {
                        table[0] = 1;
                        continue;
                    } else if (n[1] < 0)
                        n[1] += COUNT + 1;
                    updateLimit(n[1], n[1], table);
                    if (n[1] > 0)
                        table[n[1]] = 1;
                    continue;
                } else if (sep == length(ranges[i])) {
                    if (n[1] == 0)
                        table[0] = 1;
                    else if (n[1] < 0)
                        n[1] += COUNT + 1;
                    if (! has_threshold) {
                        threshold = n[1];
                        has_threshold = ! has_threshold;
                    } else
                        threshold = min(threshold, n[1]);
                    if (COUNT)
                        updateLimit(n[1], COUNT, table);
                    else
                        has_limit = 0;
                    continue;
                } else if (sep == 1) {
                    if (n[2] == 0) {
                        table[0] = 1;
                        continue;
                    }
                    n[1] = 1;
                }
                if (n[1] == 0) {
                    if (n[2] < 0) {
                        n[2] += COUNT + 1;
                        if (n[2] <= 0)
                            continue;
                    }
                    table[0] = 1;
                    n[1] = 1;
                } else if (n[2] == 0) {
                    if (n[1] == 0)
                        table[0] = 1;
                    continue;
                }
                if (n[1] < 0) n[1] += COUNT + 1;
                if (n[2] < 0) n[2] += COUNT + 1;
                updateLimit(n[1], n[2], table);
                if (n[1] > 0) {
                    for (j = n[1]; j <= n[2]; ++j)
                        table[j] = 1;
                }
            }
            if (has_threshold)
                threshold = max(threshold, 1);
            else
                threshold = 0;
            if (has_limit)
                limit = max(limit, 0);
            else
                limit = 0;
        }
        function test(idx) {
            if (! (idx in exclude) && (! ex_threshold || idx < ex_threshold)) {
                if (ALL || idx in fixed || (threshold && idx >= threshold))
                    return 1;
            }
            return 0;
        }
        function skip(text,  i) {
            if ('${#PATTERNS}') {
                for (i in patterns) {
                    if (text !~ patterns[i])
                        return '$(( 1 - ${#_not} ))';
                }
                return '${#_not}';
            } else
                return 0;
        }'

    prelude="$functions"'
    BEGIN {
        if (ALL) {
            parseList(FIXED, fixed);
            parseList(EXCLUDE, exclude); ex_threshold = threshold;
        } else if (FIXED != "") {
            parseList(EXCLUDE, exclude); ex_threshold = threshold;
            parseList(FIXED, fixed);
        } else {
            ALL = 1; RANDOM = 1;
            parseList(EXCLUDE, exclude); ex_threshold = threshold;
        }
        split(PATTERNS, patterns, "\n");
        current = count = 0;
        delayed = 0;
        entry = "";
    }'

    if [ "$DELIM" ]; then
    delayed='
        if (delayed) {
            delayed = 0;
            if (SEARCHALL)
                sub(/\n$/, "", entry);
            if (skip(entry))
                count -= 1;
            entry = "";
        }'
    main='{
        if ($0 ~ /^'"$DELIM"'/) {
            if (NR == 1)
                delete fixed[0];
            if (limit && current == limit)
                exit;
            '"$delayed"'
            if (FIRST && count)
                exit;
            if (test(++current)) {
                matches[count++] = current;
                sub(/^'"$DELIM"'[ \t]*/, "");
                if (SEARCHALL) {
                    if ($0 != "")
                        entry = entry $0 "\n";
                    delayed = 1;
                } else {
                    '"$COMMENT"';
                    if ($0 != "") {
                        if (skip($0))
                            count -= 1;
                    } else
                        delayed = 1;
                }
            }
        } else if (delayed) {
            if (SEARCHALL) {
                entry = entry $0 "\n";
            } else {
                delayed = 0;
                '"$COMMENT"';
                if (skip($0))
                    count -= 1;
            }
        }
    }'
    else
    delayed='
        if (delayed) {
            delayed = 0;
            sub(/\n$/, "", entry);
            if (skip(entry))
                count -= 1;
            entry = "";
        }'
    main='{
        if (SEARCHALL)
            line = $0;
        '"$COMMENT"';
        if ($0 ~ /[^ \t]/) {
            if (NR == 1)
                delete fixed[0];
            if (limit && current == limit)
                exit;
            '"$delayed"'
            if (FIRST && count)
                exit;
            if (test(++current)) {
                matches[count++] = current;
                if (SEARCHALL) {
                    entry = entry line "\n";
                    delayed = 1;
                } else {
                    if (skip($0))
                        count -= 1;
                }
            }
        } else if (delayed) {
            entry = entry line "\n";
        }
    }'
    fi

    postlude='END {
        '"$delayed"'
        if (COUNTONLY) {
            if (count && (RANDOM || FIRST || LAST))
                print 1;
            else
                print count;
        } else {
            if (NR && fixed[0] && test(0))
                print 0;
            if (! count)
                exit;
            if (FIRST) {
                print matches[0];
            } else if (LAST) {
                print matches[count-1];
            } else if (RANDOM) {
                srand('$RANDOM');
                print matches[ int(rand() * count) ];
            } else {
                for (i = 0; i < count; ++i)
                    print matches[i];
            }
        }
    }'

    OUTPUT=$(${AWK[@]} "${vars[@]}" "${prelude}${main}${postlude}" "${FILES[@]}")
}

processFiles() {
    firstPass || return $?
    [ -z "$OUTPUT" ] && return 0
    [ "$_noprint" ] && echo "$OUTPUT" && return 0

    local printnum printpad prelude delayed delayed_print main vars=(
        -v TARGETS="$OUTPUT"
        -v FIRSTLINE=$_firstline
        -v RAW=$_raw  -v PRESERVE=$_raw$_preserve
    )
    if [ "$NUMBER" ]; then
        printnum='printf "%'$ALIGN'*s", pad, '"$NUMBER"
        printpad='printf "%'$ALIGN'*s", pad, ""'
    fi

    prelude='BEGIN {
        FS = "\n";
        $0 = TARGETS;
        for (i = 1; i <= NF; ++i)
            targets[$i] = 1;
        limit = $NF;
        if ('${#_canonical}') {
            if (! $1)
                NF -= 1;
            if (NF)
                pad = length(NF) + '$PAD' + 1;
        } else {
            if (limit)
                pad = length(limit) + '$PAD' + 1;
        }
        current = count = 0;
        if (targets[0])
            printing = delayed = 1;
        else
            printing = delayed = 0;
        FS = " ";
    }'

    delayed_print='
        if (delayed) {
            delayed = 0;
            '"$printnum"'; print $0;
            if (FIRSTLINE)
                printing = 0;
        } else {
            '"$printpad"'; print $0;
        }'

    if [ "$DELIM" ]; then
    delayed='
        if (delayed) {
            delayed = 0;
            '"$printnum"'; print "";
        }'
    main='{
        if ($0 ~ /^'"$DELIM"'/) {
            if (current == limit)
                exit;
            '"$delayed"'
            printing = 0;
            if (targets[++current]) {
                count += 1;
                printing = 1;
                if (! RAW)
                    sub(/^'"$DELIM"'[ \t]*/, "");
                if (! PRESERVE)
                    '"$COMMENT"';
                if ($0 != "") {
                    '"$printnum"'; print $0;
                    if (FIRSTLINE)
                        printing = 0;
                } else
                    delayed = 1;
            }
        } else if (printing) {
            if (! PRESERVE) {
                non_null = ($0 != "");
                '"$COMMENT"';
                if (non_null && $0 == "")
                    next;
            }
            '"$delayed_print"'
        }
    } END { '"$delayed"' }'
    else
    main='{
        line = $0;
        '"$COMMENT"';
        if ($0 ~ /[^ \t]/) {
            if (delayed) {
                delayed = 0;
                '"$printnum"'; print "";
            }
            if (current == limit)
                exit;
            printing = 0;
            if (targets[++current]) {
                count += 1;
                if (PRESERVE) {
                    '"$printnum"'; print line;
                } else {
                    '"$printnum"'; print $0;
                }
                if (! FIRSTLINE)
                    printing = 1;
            }
        } else if (printing) {
            if (current == 0) {
                if (PRESERVE)
                    $0 = line;
                else if (line != "" && $0 == "")
                    next;
                '"$delayed_print"'
            } else if (PRESERVE) {
                '"$printpad"'; print line;
            }
        }
    }'
    fi

    if [ "$FOLD" ]
    then ${AWK[@]} "${vars[@]}" "${prelude}${main}" "${FILES[@]}" | "${FOLD[@]}"
    else ${AWK[@]} "${vars[@]}" "${prelude}${main}" "${FILES[@]}"
    fi

    return ${PIPESTATUS[0]}
}

declare -i code=0

FILES=()

for arg in "$@"; do
    if [ "$arg" = "-" ]; then
        FILES+=(/dev/stdin)
        _temp=1
    elif [ -f "$arg" -a -r "$arg" ]; then
        FILES+=("$arg")
    elif [ -p "$arg" -a -r "$arg" ]; then
        FILES+=("$arg")
        _temp=1
    elif [ -f "$arg" -o -p "$arg" ]; then
        errorMsg "$arg: Permission denied"
        code+=1
    else
        errorMsg "$arg: File not found"
        code+=1
    fi
done

if [ ${#FILES[@]} -gt 0 ]; then
    processFiles || code+=$?
    cleanUp
fi

exit $code

# vim:set ts=4 sw=4 et:

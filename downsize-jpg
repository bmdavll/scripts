#!/bin/bash

PROG=$(basename "$0")
IFS=$'\n'

printUsage() {
	echo "Usage: $PROG [-r] [-i] [-n] [-p]"
	echo "       $(printf '%*s' ${#PROG} ' ') [-q MAX_QUAL] [-t|-s|-m|-l|-x|-g GEOMETRY] FILE..."
}
printHelp() {
	printUsage
	echo
	echo "  -r	recursive"
	echo "  -i	interactive"
	echo "  -n	dry run"
	echo "  -p	preserve date"
	echo "  -t	tiny"
	echo "  -s	small"
	echo "  -m	medium (default)"
	echo "  -l	large"
	echo "  -x	extra large"
	echo
	echo "  GEOMETRY"
	echo "	NONE"
	echo "	{scale}%"
	echo "	{width}  x{height}"
	echo "	{max_width}x{max_height}  {max_width}x{max_height}>"
	echo "	{width}x{height}!"
	echo "	{area}@"
	echo
}

errorMsg() {
	echo >&2 "$@"
}
errorExit() {
	echo >&2 "$PROG: $@"
	exit 3
}
trap "errorExit aborted" 2 3
trap "errorExit terminated" 1 15

rflag=
iflag=
nflag=
pflag=
qflag=

sflag=m
MAX_QUAL=
GEOMETRY=
SCALES=( 25.0 37.5 50.0 62.5 75.0 )

if [ "$1" = "--help" ]; then
	printHelp
	exit 0
fi

while getopts 'hrinptsmlxq:g:' option
do
	case $option in
	h)	printUsage
		exit 0
		;;
	r)	rflag=1
		;;
	i)	iflag=1
		;;
	n)	nflag=1
		;;
	p)	pflag=1
		;;
	t|s|m|l|x)
		sflag="$option"
		;;
	q)	qflag=1
		MAX_QUAL="$OPTARG"
		;;
	g)	GEOMETRY="$OPTARG"
		;;
	?)	printUsage >&2
		exit 2
		;;
	esac
done
shift $((OPTIND - 1))

if [[ $# -eq 0 || ( "$MAX_QUAL" && ! "$MAX_QUAL" =~ ^[1-9][0-9]?$ ) ]]; then
	printUsage >&2
	exit 2
fi

[ "$sflag" = "t" -a ! "$MAX_QUAL" ] && MAX_QUAL=90

declare -i code=0

shopt -s nocasematch

TYPE="${PROG##*-}"
[[ ! "$TYPE" =~ ^[a-z]{3,4}$ ]] && errorExit "Bad filetype"


downsize() {
	g=
	qual=
	if [ -n "$GEOMETRY" ]; then
		g="$GEOMETRY"
	else
		id="$(identify -format "%b %w %h" "$1")"
		if [[ "$id" =~ ^([0-9]+)B\ ([0-9]+)\ ([0-9]+)$ ]]; then
			s="${BASH_REMATCH[1]}"
			x="${BASH_REMATCH[2]}"
			y="${BASH_REMATCH[3]}"

			if [ "$sflag" = "t" ]; then
				if   (( $s >= 1337000 && ( $x >= 2560 || $y >= 2560 ) )); then
					g=0
				elif (( $s >=  584000 && ( $x >= 1707 || $y >= 1707 ) )); then
					g=1
				elif (( $s >=  316000 && ( $x >= 1280 || $y >= 1280 ) )); then
					g=2
				elif (( $s >=  260000 && ( $x >= 1024 || $y >= 1024 ) )); then
					g=3
				elif (( $s >=  140000 && ( $x >=  853 || $y >=  853 ) )); then
					g=4
				fi
			elif [ "$sflag" = "s" ]; then
				if   (( $s >= 1800000 && ( $x >= 3200 || $y >= 3200 ) )); then
					g=0
				elif (( $s >=  830000 && ( $x >= 2133 || $y >= 2133 ) )); then
					g=1
				elif (( $s >=  450000 && ( $x >= 1600 || $y >= 1600 ) )); then
					g=2
				elif (( $s >=  369000 && ( $x >= 1280 || $y >= 1280 ) )); then
					g=3
				elif (( $s >=  200000 && ( $x >= 1067 || $y >= 1067 ) )); then
					g=4
				fi
			elif [ "$sflag" = "m" ]; then
				if   (( $s >= 3200000 && ( $x >= 4096 || $y >= 4096 ) )); then
					g=0
				elif (( $s >= 1337000 && ( $x >= 2731 || $y >= 2731 ) )); then
					g=1
				elif (( $s >=  800000 && ( $x >= 2048 || $y >= 2048 ) )); then
					g=2
				elif (( $s >=  500000 && ( $x >= 1638 || $y >= 1638 ) )); then
					g=3
				elif (( $s >=  350000 && ( $x >= 1365 || $y >= 1365 ) )); then
					g=4
				fi
			elif [ "$sflag" = "l" ]; then
				if   (( $s >= 4504000 && ( $x >= 5120 || $y >= 5120 ) )); then
					g=0
				elif (( $s >= 2215000 && ( $x >= 3413 || $y >= 3413 ) )); then
					g=1
				elif (( $s >= 1160000 && ( $x >= 2560 || $y >= 2560 ) )); then
					g=2
				elif (( $s >= 1000000 && ( $x >= 2048 || $y >= 2048 ) )); then
					g=3
				elif (( $s >=  500000 && ( $x >= 1707 || $y >= 1707 ) )); then
					g=4
				fi
			elif [ "$sflag" = "x" ]; then
				if   (( $s >= 7944000 && ( $x >= 7680 || $y >= 7680 ) )); then
					g=0
				elif (( $s >= 3525000 && ( $x >= 5120 || $y >= 5120 ) )); then
					g=1
				elif (( $s >= 2100000 && ( $x >= 3840 || $y >= 3840 ) )); then
					g=2
				elif (( $s >= 1500000 && ( $x >= 3072 || $y >= 3072 ) )); then
					g=3
				elif (( $s >= 1000000 && ( $x >= 2560 || $y >= 2560 ) )); then
					g=4
				fi
			else
				errorExit "No scale specified"
			fi
			[ "$g" ] && g="${SCALES[$g]}%"
		else
			errorMsg "$1: Error identifying file"
		fi
	fi
	if [[ "$MAX_QUAL" && "$MAX_QUAL" -lt $(identify -format "%Q" "$1") ]]; then
		qual="-quality${IFS}$MAX_QUAL"
	fi
	if [ -z "$g" -o "$g" = NONE ]; then
		if [[ ! "$qflag" || -z "$qual" ]]
		then return
		else g=
		fi
	fi
	if [ "$iflag" ]; then
		echo -n "$1: resize ${g}${g:+ }${qual:+q$MAX_QUAL } [y/a/N] " && read
		if [[ "$REPLY" == [Aa]* ]]; then
			iflag=
		elif [[ "$REPLY" != [Yy]* ]]; then
			return
		fi
	fi
	if [ "$nflag" ]; then
		echo -n "$g"$'\t'"${qual:+q$MAX_QUAL}"$'\t'
		stat --printf='%s' "$1"
		echo $'\t'"$1"
		return
	else
		echo mogrify ${g:+-resize} ${g:-$'\t'}$'\t'${qual:-$'\t'}$'\t'"$1"
	fi
	modtime="$(stat -c %y "$1")"
	mogrify ${g:+-resize} $g $qual "$1" || code+=1
	if [[ "$pflag" && -n "$modtime" ]]; then
		touch -d "$modtime" "$1"
	fi
}

for arg in "$@"
do
	if [ -f "$arg" ]; then
		if [[ "$arg" =~ \."$TYPE"$ ]]; then
			downsize "$arg"
		else
			errorMsg "$arg: Skipping non-$TYPE file"
		fi
	elif [ -d "$arg" ]; then
		if [ "$rflag" ]; then
			for file in $(find "$arg" -type f -iname "*.$TYPE" | sort)
			do
				downsize "$file"
			done
		else
			errorMsg "$arg: Skipping directory"
		fi
	else
		errorMsg "$arg: No such file or directory"
		code+=1
	fi
done

exit $code

# vim:set ts=4 sw=4 noet ft=sh:

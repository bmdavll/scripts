#!/bin/bash
#2011-03-25
#2011-04-19
#2011-04-23

PROG=$(basename "$0")
IFS=$'\n'

printUsage() {
cat << -EOF-
Usage: $PROG [-r] [-i] [-n] [-p] [-S] [-D]
       $(printf '%*s' ${#PROG} ' ') [-q MAX_QUAL] [-t|-s|-m|-l|-x|-g GEOMETRY] FILE...
-EOF-
}
printHelp() {
cat << -EOF-
$(printUsage)

  -r	recursive
  -i	interactive
  -n	dry run
  -p	preserve date
  -S	strip profiles and comments
  -D	downsample to 2x2
  -q	upper bound on quality

  -t	tiny
  -s	small
  -m	medium (default)
  -l	large
  -x	extra large

  GEOMETRY
	NONE
	{scale}%
	{width}  x{height}
	{max_width}x{max_height}  {max_width}x{max_height}>
	{width}x{height}!
	{area}@
-EOF-
}

errorMsg() {
	echo >&2 "$@"
}
errorExit() {
	echo >&2 "$PROG: $@"
	exit 3
}
trap "errorExit aborted" 2 3
trap "errorExit terminated" 1 15

rflag=
iflag=
nflag=
pflag=
Sflag=
Dflag=
qflag=
sflag=m

MAX_QUAL=
GEOMETRY=

# 16ᵗʰs
SCALE_MIN=3
SCALE_MAX=13

declare -A REL_SIZE MIN_SIDE
REL_SIZE=(
	[t]=100
	[s]=156
	[m]=256
	[l]=400
	[x]=650
)
MIN_SIDE=(
	[t]=640
	[s]=800
	[m]=1024
	[l]=1280
	[x]=1920
)

TYPE="${PROG##*-}"
[[ ! "$TYPE" =~ ^[a-z]{3,4}$ ]] && errorExit "No filetype specified"

if [ "$1" = "--help" ]; then
	printHelp
	exit 0
fi

while getopts 'hrinpSDq:tsmlxg:' option
do
	case $option in
	h)	printUsage
		exit 0
		;;
	r)	rflag=1
		;;
	i)	iflag=1
		;;
	n)	nflag=1
		;;
	p)	pflag=1
		;;
	S)	Sflag=1
		;;
	D)	Dflag=1
		;;
	q)	qflag=1
		MAX_QUAL="$OPTARG"
		;;
	t|s|m|l|x)
		sflag="$option"
		;;
	g)	GEOMETRY="$OPTARG"
		;;
	?)	printUsage >&2
		exit 2
		;;
	esac
done
shift $((OPTIND - 1))

if [[ $# -eq 0 || ( "$MAX_QUAL" && ! "$MAX_QUAL" =~ ^[1-9][0-9]?$ ) ]]; then
	printUsage >&2
	exit 2
fi

if [ "$sflag" = "t" ]; then
	[ ! "$MAX_QUAL" ] && MAX_QUAL=90
	Sflag=1
fi

if [ "$Sflag" ]; then
	SD="-strip"
else
	SD=
fi
if [ "$Dflag" ]; then
	SD+="${SD:+$IFS}-sampling-factor${IFS}2x2"
fi

SIZE=$(echo "1024*(${REL_SIZE[$sflag]}-10) / 0.17" | bc)
SIDE=${MIN_SIDE[$sflag]}

# main
declare -i code=0
shopt -s nocasematch

downsize() {
	g=
	qual=
	if [ -n "$GEOMETRY" ]; then
		g="$GEOMETRY"
	else
		id="$(identify -format "%w %h" "$1" 2>/dev/null)"
		if [[ "$id" =~ ^([0-9]+)\ ([0-9]+)$ ]]; then
			g=$(perl -e '{
				$s = '$SIZE';
				$m = '$SIDE';
				$w = '${BASH_REMATCH[1]}';
				$h = '${BASH_REMATCH[2]}';
				$f = sqrt( $s / ($w*$h) );
				for ($i = '$SCALE_MIN'; $i <= '$SCALE_MAX'; $i++) {
					if ($f <= $i/16 || abs($f - $i/16) < abs($f - ($i+1)/16)) {
						if ($w * ($i/16) >= $m || $h * ($i/16) >= $m) {
							printf "%.2f%", $i/16 * 100;
							exit;
						}
					}
				}
			}')
		else
			errorMsg "$1: Error identifying file"
			code+=1
			return
		fi
	fi
	if [[ "$MAX_QUAL" && "$MAX_QUAL" -lt $(identify -format "%Q" "$1") ]]; then
		qual="-quality${IFS}$MAX_QUAL"
	fi
	if [ -z "$g" -o "$g" = NONE ]; then
		if [[ ! "$qflag" || -z "$qual" ]]
		then return
		else g=
		fi
	fi
	if [ "$iflag" ]; then
		echo -n "$1: resize ${g}${g:+ }${qual:+q$MAX_QUAL } [y/a/N] " && read
		if [[ "$REPLY" == [Aa]* ]]; then
			iflag=
		elif [[ "$REPLY" != [Yy]* ]]; then
			return
		fi
	fi
	if [ "$nflag" ]; then
		echo -n "$g"$'\t'"${qual:+q$MAX_QUAL}"$'\t'
		stat --printf='%s' "$1"
		echo $'\t'"$1"
		return
	else
		echo mogrify ${g:+-resize} ${g:-$'\t'}$'\t'${qual:-$'\t'}${SD:+$'\t'}$SD$'\t'"$1"
	fi
	modtime="$(stat -c %y "$1")"
	mogrify ${g:+-resize} $g $qual $SD "$1" || code+=1
	if [[ "$pflag" && -n "$modtime" ]]; then
		touch -d "$modtime" "$1"
	fi
}

for arg in "$@"
do
	if [ -f "$arg" ]; then
		if [[ "$arg" =~ \."$TYPE"$ ]]; then
			downsize "$arg"
		else
			errorMsg "$arg: Skipping non-$TYPE file"
		fi
	elif [ -d "$arg" ]; then
		if [ "$rflag" ]; then
			for file in $(find "$arg" -type f -iname "*.$TYPE" | sort)
			do
				downsize "$file"
			done
		else
			errorMsg "$arg: Skipping directory"
		fi
	else
		errorMsg "$arg: No such file or directory"
		code+=1
	fi
done

exit $code

# vim:set ts=4 sw=4 noet ft=sh:

#!/bin/bash
#########################################################################
#   Command-line timer
#
#   2009-08-26  File created
#   2009-09-21  Added -x option
#   2009-09-24  Added -d option
#   2010-06-20  Show exact ammount of time elapsed/remaining on signals
#########################################################################

PROG=$(basename "$0")

ALARM="$PROG.mp3"
PLAYER=mpg123

printUsage() {
    echo "Usage: $PROG [-q] [ H:M:S | -d UNTIL ] [-x CMD]..."
}
errorUsage() {
    printUsage >&2
    [ $# -gt 0 ] && echo >&2 $'\n'"$PROG: $@"
    exit 2
}

if [ "$1" = "--help" ]; then
    printUsage
    exit 0
fi

qflag=
string=
cmds=()

getOpts() {
unset OPTIND && while getopts ':hqd:x:' option
do
    case "$option" in
    h)  printUsage
        exit 0
        ;;
    q)  qflag=1
        ;;
    d)  string="$OPTARG"
        ;;
    x)  cmds+=("$OPTARG")
        ;;
    :)  errorUsage "Option $OPTARG requires an argument"
        ;;
    ?)  case "$OPTARG" in
        \?) printUsage
            exit 0
            ;;
        *)  errorUsage "Illegal option" "$OPTARG"
            ;;
        esac
        ;;
    esac
done
}

getOpts "$@" && shift $((OPTIND - 1))

PARSE='{
    h = 0; s = 0;
    n = split($0, a, ":");
    if (n == 1) {
        m = a[1];  if (invalid(m)) exit 1;
    }
    else if (n == 2) {
        m = a[1];  if (invalid(m)) exit 1;
        s = a[2];  if (invalid(s)) exit 1;
    }
    else if (n == 3) {
        h = a[1];  if (invalid(h)) exit 1;
        m = a[2];  if (invalid(m)) exit 1;
        s = a[3];  if (invalid(s)) exit 1;
    }
    else exit 1;
    print int(h * 3600 + m * 60 + s);
}
function invalid(num) {
    if (num !~ /^[0-9]*(\.[0-9]*)?$/)
        return 1;
    else
        return 0;
}'
STATUS='{
    if (! $0) exit;
    h = int($0 / 3600);
    if (h) {
        printf "%s hour%s", h, (h > 1 ? "s" : "");
        sep = " ";
    }
    $0 = $0 % 3600;
    m = int($0 / 60);
    if (m) {
        printf "%s%s minute%s", sep, m, (m > 1 ? "s" : "");
        sep = " ";
    }
    s = $0 % 60;
    if (s)
        printf "%s%s second%s", sep, s, (s > 1 ? "s" : "");
    printf MSG;
}'

DATE='%T'

abortTimer() {
    tput el1 && echo -n $'\r' &&
    echo $(stty -a | grep "intr" | awk -v RS=';' '$1 == "intr" {print $3}')
    if [ ! "$qflag" ]; then
        date +"$DATE"
        elapsed=$(( $(date +'%s') - start ))
        echo $(( $1 )) | awk -v MSG=" $2\n" "$STATUS"
    fi
    exit 1
}
TRAPS="HUP INT QUIT ABRT TERM"

declare -i start seconds elapsed=0

if [ $# -eq 0 -a -z "$string" ]; then
    if [ ! "$qflag" ]; then
        start=$(date +'%s')
        date +"$DATE"
        trap "abortTimer elapsed elapsed" $TRAPS
        while true; do
            sleep 60
            elapsed+=60
            tput el1 && echo -n $'\r' && echo $elapsed | awk "$STATUS" &
        done
    fi
    exit
fi

if [ $# -eq 0 ]; then
    seconds=$(( $(date +'%s' -d "$string") - $(date +'%s') ))
    (( seconds < 0 )) && exit 1
    unset string
else
    seconds=$(echo "$1" | awk "$PARSE")
    [ $? -ne 0 ] && errorUsage
    shift
fi
(( seconds >= 24*60*60 )) && DATE='%F'$'\t''%T'

getOpts "$@" && shift $((OPTIND - 1))
[ $# -ne 0 -o -n "$string" ] && errorUsage

if [ "$qflag" ]; then
    sleep $seconds
    for expr in "${cmds[@]}"; do
        eval "$expr"
    done
    exit
fi

declare -i remaining=$seconds
stops=()

    countTo() {
        local limit=$(($1 * 60)) decr=$2 && shift 2
        (( remaining <= limit )) && return
        local mod=$(( remaining % decr ))
        if (( mod > 0 )); then
            stops+=($mod)
            remaining+=-$mod
        fi
        while (( remaining > limit )); do
            stops+=($decr)
            remaining+=-$decr
        done
    }   #   min sec
    countTo 30  600
    countTo 20  300
    countTo 10  120
    countTo 5   60
    countTo 2   30
    countTo 1   15
    countTo 0   5

unset remaining

start=$(date +'%s')
date +"$DATE"
trap "abortTimer seconds-elapsed remaining" $TRAPS

for s in "${stops[@]}"; do
    echo $(( seconds - elapsed )) | awk -v MSG=' remaining' "$STATUS" &
    sleep $s
    elapsed+=$s
    tput el1 && echo -n $'\r' &
done

ALARM="$(dirname "$(readlink -f "$(which "$0")")")/$ALARM"

qflag=1
date +"$DATE"

if [ ${#cmds[@]} -gt 0 ]; then
    for expr in "${cmds[@]}"; do
        eval "$expr"
    done
elif which "${PLAYER%% *}" &>/dev/null && [ -f "$ALARM" ]; then
    $PLAYER "$ALARM" &>/dev/null
fi

# vim:set ts=4 sw=4 et:
